#!/usr/bin/env python
import argparse
import asyncio
import logging
import os

from geotool_db_api.common import create_pool_a
from mqrecv_lib.analogue_io import main_analogue_io, main_current_analogue_io
from mqrecv_lib.battery_update import main_battery_update
from mqrecv_lib.cell_update import main_cell_update
from mqrecv_lib.debug_log import main_debug_log
from mqrecv_lib.digital_io import main_digital_io, main_current_digital_io
from mqrecv_lib.event import main_event
from mqrecv_lib.gps_update import main_gps_update

MQ_HOST = os.environ.get("MQ_HOST", "127.0.0.1")
MQ_USER = os.environ.get("MQ_USER", "guest")
MQ_PASS = os.environ.get("MQ_PASS", "guest")

logger = logging.getLogger(__name__)


if __name__ == "__main__":
    if __name__ == "__main__":

        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
        parser.add_argument(
            '-l',
            '--line-numbers',
            help="Don't include line numbers in logging output",
            action="store_false",
            default=True,
        )
        parser.add_argument(
            '-v',
            dest='debug',
            help=("Increase the logging level. Can specify this option multiple "
                  "times for more detail."),
            action="count",
            default=int(os.environ.get('DEBUG_LEVEL', 0))
        )
        args = parser.parse_args()

        log_level = 16 - args.debug

        logger = logging.getLogger('')
        logger.setLevel(logging.INFO)

        ch = logging.StreamHandler()
        ch.setLevel(logging.DEBUG)
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(name)s - %(message)s'
        )
        if args.line_numbers:
            formatter = logging.Formatter(
                '%(asctime)s - %(process)d - %(levelname)s - %(name)s - %(lineno)d - %(message)s'
            )
        ch.setFormatter(formatter)
        logger.addHandler(ch)

        # almost time to look into kombu
        logging.getLogger("pika").setLevel(logging.FATAL)

        if args.debug:
            logger.setLevel(log_level)
            ch.setLevel(log_level)

    loop = asyncio.get_event_loop()
    loop.run_until_complete(create_pool_a())
    print("Event processor has started.")
    loop.create_task(main_event(loop))
    loop.create_task(main_analogue_io(loop))
    loop.create_task(main_digital_io(loop))
    loop.create_task(main_current_analogue_io(loop))
    loop.create_task(main_current_digital_io(loop))
    loop.create_task(main_battery_update(loop))
    loop.create_task(main_cell_update(loop))
    loop.create_task(main_gps_update(loop))
    loop.create_task(main_debug_log(loop))
    loop.run_forever()
