#!/usr/bin/env python
# chat_client.py

import sys
import socket
import select
import time


def chat_client():
    if (len(sys.argv) < 3):
        print('Usage : python chat_client.py hostname port')
        sys.exit()

    cmd = None
    if len(sys.argv) == 4:
        cmd = sys.argv[3]

    host = sys.argv[1]
    port = int(sys.argv[2])

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(2)

    # connect to remote host
    try:
        s.connect((host, port))
        s.send("M@ST#R:".encode())
    except:
        print('Unable to connect')
        sys.exit()

    if cmd:
        time.sleep(1)
        print(cmd)
        s.send(cmd.encode() + b'\n')
        s.send(b'\n')
        data = s.recv(4096)
        print(data)
        sys.exit(0)

    print('Connected to remote host. You can start sending messages')
    sys.stdout.write('[Me] ');
    sys.stdout.flush()

    while 1:
        socket_list = [sys.stdin, s]

        # Get the list sockets which are readable
        ready_to_read, ready_to_write, in_error = select.select(socket_list, [], [])

        for sock in ready_to_read:
            if sock == s:
                # incoming message from remote server, s
                data = sock.recv(4096).decode()
                if not data:
                    print('\nDisconnected from chat server')
                    sys.exit()
                else:
                    # print data
                    sys.stdout.write(data)
                    sys.stdout.write('[Me] ');
                    sys.stdout.flush()

            else:
                # user entered a message
                msg = sys.stdin.readline()
                if not msg:
                    sys.exit(0)
                s.send(msg.encode())
                sys.stdout.write('[Me] ');
                sys.stdout.flush()


if __name__ == "__main__":
    sys.exit(chat_client())