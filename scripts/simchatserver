#!/usr/bin/env python

# chat_server.py
import datetime
import sys
import socket
import select
import argparse
import logging
import os
import traceback

from geotool_api.common import set_api_host

import sim_chat_lib
from sim_chat_lib.exception import Error as SimChatError
from sim_chat_lib.exception import ProtocolError
from sim_chat_lib.report.async_api import start_consumers, get_result, stop_consumers

HOST = ''
RECV_BUFFER = 4096
PORT = 65533

MASTER_LIST = []
logger = logging.getLogger(__name__)
logging.addLevelName(15, "VERBOSE")
logging.addLevelName(13, "VERBOSE+")

CHAT_CLIENT_LIST = {}
CHAT_CLIENT_IDENT_LIST = {}
connections = {}
QUIT_FLAG = False
epoll = select.epoll()


def close_socket(sock):
    global epoll
    sock_fd = sock.fileno()
    logger.log(13, "Closing socket %s with fd %s", sock, sock_fd)
    peer = [None, None]
    try:
        peer = sock.getpeername()
    except OSError as err:
        logger.error("OSError on getpeername when closing socket %s", err)
    except socket.error as err:
        logger.error("Socket error on getting peer %s", err)
        logger.error("Socket is of type: %s", type(sock))
        logger.error(traceback.print_exc())

    # for key in SOCKET_MAP:
    #     if SOCKET_MAP[key] == sock_fd:
    #         logger.info("Client %s (%s, %s) is offline", key, peer[0], peer[1])
    #         SOCKET_MAP[key] = None

    if CHAT_CLIENT_LIST.get(sock_fd):
        logger.log(13, "Found the socket in the chat client list")
        CHAT_CLIENT_LIST[sock_fd].on_server_close()
        ident = CHAT_CLIENT_LIST[sock_fd].ident()
        CHAT_CLIENT_IDENT_LIST[ident] = None
        CHAT_CLIENT_LIST[sock_fd] = None

    if sock in MASTER_LIST:
        logger.info("Master disconnected from %s", sock)
        MASTER_LIST.remove(sock)
        # return

    logger.log(13, "Unregistering socket fd %s from epoll", sock.fileno())
    epoll.unregister(sock.fileno())
    connections[sock.fileno()] = None

    try:
        sock.close()
        logger.info("Socket closed %s", sock_fd)
    except socket.error as err:
        logger.error("Socket error on close %s", err)

    logger.log(13, "{}".format(connections))
    logger.log(13, "{}".format(MASTER_LIST))
    logger.log(13, "{}".format(CHAT_CLIENT_LIST))


def sock_fd_to_socket(sock_fd):
    sock = connections.get(sock_fd)
    if sock:
        logger.log(13, "Found socket file descriptor {} in connection list".format(sock_fd))
        return sock
    else:
        logger.error("Did not find a connection for file descriptor {} in connection list".format(sock_fd))
    return None


def track_socket(sock):
    if sock and sock.fileno():
        logger.log(13, "Tracking file descriptor {} with socket {}".format(sock.fileno(), sock))
        connections[sock.fileno()] = sock


def execute_command(data):
    global QUIT_FLAG
    logger.info("Executing command: %s", data)
    if ',' in data:
        line = data.split(",", 1)
        imei = line[0]
        cmd = line[1]
        send_to_device(imei, cmd)
    else:
        if data == "list":
            for sock in MASTER_LIST:
                try:
                    peer = sock.getpeername()
                    logger.info("Master is connected from %s:%s" % (peer[0], peer[1]))
                    send_to_masters("Master is connected from %s:%s" % (peer[0], peer[1]))
                except socket.error:
                    logger.error("Socket error getting peer details or sending to masters")
                    close_socket(sock)
            logger.log(13, "%s", CHAT_CLIENT_LIST)
            for sock_fd in CHAT_CLIENT_LIST:
                logger.log(13, "Sockfd: %s", sock_fd)
                if CHAT_CLIENT_LIST[sock_fd]:
                    message = CHAT_CLIENT_LIST[sock_fd].get_client_details()
                    logger.log(13, message)
                    send_to_masters(message)
            send_to_masters(str(connections))
            send_to_masters('\n')
        if data == "debug":
            root_logger = logging.getLogger('')
            root_logger.setLevel(logging.DEBUG)
        if data == "nodebug":
            root_logger = logging.getLogger('')
            root_logger.setLevel(logging.INFO)
        if data == "quit":
            QUIT_FLAG = True


def is_master_by_socket(sock):
    if sock in MASTER_LIST:
        return True
    return False


def identify_client(sock, task_queue, client_buffer):
    client = sim_chat_lib.parse_client_connect(sock, task_queue, client_buffer)
    if client:
        CHAT_CLIENT_LIST[sock.fileno()] = client
        ident = client.ident()
        logger.log(13, "Client ident is %s", ident)
        if CHAT_CLIENT_IDENT_LIST.get(ident):
            logger.error("Error in identifying client. Closing socket")
            close_socket(CHAT_CLIENT_IDENT_LIST.get(ident))
        CHAT_CLIENT_IDENT_LIST[ident] = sock
        # SOCKET_MAP
        logger.info(client.get_client_details())
        send_to_masters(client.get_client_details())
    else:
        logger.error("No chat client instantiated")
        # close_socket(sock)


def is_available(ident):
    if CHAT_CLIENT_IDENT_LIST.get(ident):
        return True
    return False


def get_client(ident):
    if CHAT_CLIENT_IDENT_LIST.get(ident):
        if CHAT_CLIENT_LIST.get(CHAT_CLIENT_IDENT_LIST.get(ident).fileno()):
            return CHAT_CLIENT_LIST.get(CHAT_CLIENT_IDENT_LIST.get(ident).fileno())
    return None


def chat_server(port, task_queue, result_queue, disconnect_unidentified, wait_time):
    global QUIT_FLAG
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((HOST, port))
    server_socket.listen(10)
    server_socket.setblocking(0)

    logger.info("Chat server started on port " + str(PORT))

    epoll.register(server_socket.fileno(), select.EPOLLIN)
    logger.log(13, "Result queue file descriptor is %s", result_queue._reader.fileno())
    epoll.register(result_queue._reader, select.EPOLLIN)
    epoll.register(sys.stdin, select.EPOLLIN)

    QUIT_FLAG = False

    while not QUIT_FLAG:
        events = epoll.poll(wait_time)
        if events:
            for sock_fd, event in events:

                # get the list sockets which are ready to be read through select
                # 4th arg, time_out  = 0 : poll and never block
                # ready_to_read, ready_to_write, in_error = select.select(SOCKET_LIST, [], [], 30)

                # for sock in ready_to_read:
                # a new connection request recieved
                logger.log(13, "Testing if result queue reader")
                if result_queue and sock_fd == result_queue._reader.fileno():
                    logger.log(13, "Is a result queue reader")
                    response = get_result(result_queue)
                    if response and response.get("imei"):
                        if is_available("imei-%s" % (response["imei"],)):
                            logger.log(13, "Found connection for response with ident imei-%s", response["imei"])
                            client = get_client("imei-%s" % (response["imei"],))
                            if not client:
                                logger.error("Unable to get client for imei: %s", response["imei"])
                            else:
                                if response.get("type") == "config":
                                    client.parse_config(response["response"])
                                elif response.get("type") == "firmware_version":
                                    client.parse_firmware_version(response["response"])
                                elif response.get("type") == "firmware_binary":
                                    client.parse_firmware_binary(response["response"])
                                else:
                                    logger.log(
                                        13,
                                        "Response %s is not a response that will be passed to the client",
                                        response.get("type")
                                    )
                            # response.parser(response.result)
                        else:
                            logger.error("Device %s is no longer available for response", response.get("imei"))
                    else:
                        logger.log(13, "Unable to deliver response %s", response)

                elif sock_fd == server_socket.fileno():
                    connection, addr = server_socket.accept()
                    track_socket(connection)
                    # connections[connection.fileno()] = connection
                    epoll.register(connection, select.EPOLLIN | select.EPOLLRDHUP | select.EPOLLHUP)
                    logger.info("Client (%s, %s) connected", addr[0], addr[1])
                    logger.info("New client has fd %s", connection.fileno())
                    try:
                        connection.settimeout(0.150)
                        imei_line = connection.recv(1024)
                        if not imei_line:
                            logger.info("No data on connect.")
                            if disconnect_unidentified:
                                logger.error("Closing socket as it has not been identified")
                                close_socket(connection)
                        else:
                            imei_line = imei_line

                            # connection.settimeout(0)
                            connection.setblocking(0)
                            if b'M@ST#R:' in imei_line[0:7] and (addr[0] == "127.0.0.1" or addr[0][0:6] == "172.17"):
                                logger.info("New master connection from %s:%s", addr[0], addr[1])
                                send_to_masters("New master connection from %s:%s" % (addr[0], addr[1]))
                                MASTER_LIST.append(connection)
                                if len(imei_line) > 7:
                                    execute_command(imei_line[7:].decode().rstrip())

                            else:
                                logger.log(13, imei_line)
                                identify_client(connection, task_queue, imei_line)
                    except ConnectionError as err:
                        logger.error("Connection error on initial connect, with error: %s", err)
                        close_socket(connection)
                    except socket.timeout as err:
                        if disconnect_unidentified:
                            logger.error(
                                "No imei in timeout period from IP: %s:%s. Closing. Error: %s",
                                addr[0],
                                addr[1],
                                err
                            )
                            send_to_masters("No imei in timeout period from IP: %s:%s. Closing" % (addr[0], addr[1]))
                            close_socket(connection)
                        else:
                            logger.error("No connect string but keeping connection alive.")
                            # Still need to set back to non-blocking as exception has skipped in the above code
                            # connection.settimeout(0)
                            connection.setblocking(0)

                    except UnicodeDecodeError as err:
                        logger.error(
                            "Chat protocol exception unable to convert bytes IP: %s:%s. Closing: %s" % (
                                addr[0], addr[1], err
                             )
                        )
                        send_to_masters(
                            "Chat protocol exception unable to convert bytes IP: %s:%s. Closing: %s" % (
                                addr[0], addr[1], err
                            )
                        )
                        close_socket(connection)
                    except SimChatError as err:
                        logger.error(
                            "Chat protocol exception from IP: %s:%s. Closing: %s" % (addr[0], addr[1], err.message)
                        )
                        send_to_masters(
                            "Chat protocol exception from IP: %s:%s. Closing: %s" % (addr[0], addr[1], err.message)
                        )
                        close_socket(connection)

                        # broadcast(server_socket, sock_fd, "[%s:%s] entered our chatting room\n" % addr)

                elif event & select.EPOLLIN:
                    logger.log(13, "Is an epollin event")
                    if sock_fd == sys.stdin.fileno():
                        data = sys.stdin.readline().rstrip()
                        if data:
                            execute_command(data)
                    # a message from a client, not a new connection
                    else:
                        # process data recieved from client,
                        logger.log(13, "Received data on socket %s", sock_fd)
                        sock = sock_fd_to_socket(sock_fd)
                        if not sock:
                            logger.error("Not able to find an associated socket for processing.")
                        else:
                            try:
                                if is_master_by_socket(sock):
                                    data = sock.recv(RECV_BUFFER)
                                    if not data:
                                        logger.error("No data on master socket. Closing %s", sock)
                                        close_socket(sock)
                                    else:
                                        execute_command(data.decode().rstrip())

                                elif CHAT_CLIENT_LIST.get(sock_fd):
                                    logger.log(13, "Found a client in the list %s", CHAT_CLIENT_LIST.get(sock_fd))
                                    result = CHAT_CLIENT_LIST.get(sock_fd).receive_data()
                                    logger.log(13, "Received the following data: %s", result)
                                    if result:
                                        logger.log(13, "Result is ok, sending to masters")
                                        send_to_masters(result)
                                else:
                                    logger.log(13, "Must be data to read but not on an expected fd. Could be a login.")
                                    data = sock.recv(RECV_BUFFER)
                                    if data:
                                        logger.error("Spurious data or login attempt: %s", data)
                                        identify_client(sock, task_queue, data)
                                    else:
                                        logger.info("No data on initial connect. Closing: %s", sock)
                                        close_socket(sock)
                                        send_to_masters("Client is offline. Closing: %s\n" % (sock,))
                                # at this stage, no data means probably the connection has been broken
                                # broadcast(server_socket, connections[sock_fd], "Client (%s, %s) is offline\n" % addr)
                                # exception
                            except socket.error as err:
                                logger.error("Client (%s, %s) is offline with error: %s", addr[0], addr[1], err)
                                close_socket(sock)
                                send_to_masters("Client (%s, %s) is offline with error: %s" % (addr[0], addr[1], err))
                                # broadcast(server_socket, sock, "Client (%s, %s) is offline\n" % addr)
                            except SimChatError as err:
                                logger.error(
                                    "Chat protocol exception (%s). Closing: %s" % (err.message, sock_fd)
                                )
                                send_to_masters(
                                    "Chat protocol exception (%s). Closing: %s" % (err.message, sock_fd)
                                )
                                close_socket(sock)
                            except Exception as err:
                                logger.fatal(
                                    "Generic exception in processing data (%s). Closing: %s" % (err, sock_fd)
                                )
                                logger.fatal(traceback.format_exc())
                                close_socket(sock)

                elif event & select.EPOLLOUT:
                    logger.error("Is an epollout event, with fd %s", sock_fd)
                elif event & select.EPOLLHUP:
                    logger.error("Is an epollhup event on fd %s", sock_fd)
                    try:
                        epoll.unregister(sock_fd)
                    except FileNotFoundError as err:
                        logger.error("Unable to unregister fd %s from epoll with error: %s", sock_fd, err)
                    if sock_fd in connections:
                        connections[sock_fd] = None
                elif event & select.EPOLLRDHUP:
                    logger.error("Is an epollrdhup event on fd %s", sock_fd)
                    try:
                        epoll.unregister(sock_fd)
                    except FileNotFoundError as err:
                        logger.error("Unable to unregister fd %s from epoll with error: %s", sock_fd, err)
                    if sock_fd in connections:
                        connections[sock_fd] = None
        else:
            logger.debug("Event list is empty. Must be a timeout.")

        # At every iteration we are looping over every socket to check if there is data that needs to be sent
        # This can't only happen in a timeout as in a loaded system it will be rare for a timeout to occur
        for sock_fd in CHAT_CLIENT_LIST:
            if CHAT_CLIENT_LIST.get(sock_fd):
                CHAT_CLIENT_LIST.get(sock_fd).check_for_timeout(datetime.datetime.utcnow())

        for sock_fd in CHAT_CLIENT_LIST:
            if CHAT_CLIENT_LIST.get(sock_fd):
                if CHAT_CLIENT_LIST.get(sock_fd).has_expired():
                    logger.info("Timeout on client %s", sock_fd)
                    sock = sock_fd_to_socket(sock_fd)
                    if sock:
                        close_socket(sock)
                    else:
                        logger.error("Not able to translate sock_fd to sock. sock_fd: %s", sock_fd)

    stop_consumers(task_queue)

    server_socket.close()


def send_to_masters(data):
    logger.log(13, "Sending %s to masters", data)
    for sock in MASTER_LIST:
        try:
            sock.send(data.encode())
            sock.send('\n'.encode())
        except socket.error:
            logger.error("Error in sending to master. Closing: %s", sock)
            close_socket(sock)
    logger.log(13, "Done sending data to masters")


def send_to_device(ident, cmd):

    if ident == "bc":
        for sock_fd in CHAT_CLIENT_LIST:
            if CHAT_CLIENT_LIST[sock_fd]:
                try:
                    if cmd == "info":
                        CHAT_CLIENT_LIST[sock_fd].request_client_info()
                    elif cmd == "location":
                        CHAT_CLIENT_LIST[sock_fd].request_client_location()
                    elif cmd == "photo_list":
                        CHAT_CLIENT_LIST[sock_fd].request_client_photo_list()
                    elif "take_photo" in cmd:
                        camera_number = "1"
                        file_name = None
                        cmd_arr = cmd.split(",")
                        if len(cmd_arr) >= 2:
                            camera_number = cmd_arr[1]
                        if len(cmd_arr) >= 3:
                            file_name = cmd_arr[2]
                        CHAT_CLIENT_LIST[sock_fd].request_client_take_photo(camera_number, file_name)
                    elif "get_file" in cmd:
                        file_name = None
                        payload_start_index = 0
                        cmd_arr = cmd.split(",")
                        if len(cmd_arr) >= 2:
                            file_name = cmd_arr[1]
                        if len(cmd_arr) >= 3:
                            payload_start_index = cmd_arr[2]
                        if file_name:
                            CHAT_CLIENT_LIST[sock_fd].request_get_file(file_name, payload_start_index)

                    else:
                        CHAT_CLIENT_LIST[sock_fd].send_command(cmd)
                except socket.error as err:
                    logger.error("Error in sending data to device. Closing %s with error: %s", sock_fd, err)
                    close_socket(connections[sock_fd])

    elif CHAT_CLIENT_IDENT_LIST.get(ident):
        try:
            client = get_client(ident)
            if client:
                cmd_arr = cmd.split(",")
                if cmd == "info":
                    client.request_client_info()
                elif cmd == "location":
                    client.request_client_location()
                elif cmd == "photo_list":
                    client.request_client_photo_list()
                elif "take_photo" in cmd:
                    camera_number = "1"
                    file_name = None
                    if len(cmd_arr) >= 2:
                        camera_number = cmd_arr[1]
                    if len(cmd_arr) >= 3:
                        file_name = cmd_arr[2]
                    client.request_client_take_photo(camera_number, file_name)
                elif "get_file" in cmd:
                    file_name = None
                    payload_start_index = 0
                    if len(cmd_arr) >= 2:
                        file_name = cmd_arr[1]
                    if len(cmd_arr) >= 3:
                        payload_start_index = cmd_arr[2]
                    if file_name:
                        client.request_get_file(file_name, payload_start_index)
                elif "firmware_update" == cmd:
                    client.request_firmware_update()
                elif "cancel_firmware_update" == cmd:
                    client.request_cancel_firmware_update()
                elif "update_configuration" == cmd:
                    client.update_configuration()
                elif "restart_device" == cmd:
                    client.restart_device()
                elif "restart_gps" == cmd:
                    client.restart_gps()
                elif "set_pin" in cmd:
                    print(len(cmd_arr))
                    if len(cmd_arr) >= 3:
                        try:
                            pin = int(cmd_arr[1])
                            state = int(cmd_arr[2])
                            client.set_output(pin, state)
                        except ValueError as _:
                            pass

                elif "debug" == cmd:
                    client.debug = not client.debug
                    logger.info("Debug mode for ident %s is now %s", ident, str(client.debug))
                else:
                    client.send_command(cmd)
        except KeyError as err:
            logger.error("Unable to find client with identifier %s", ident)

        except socket.error as err:
            logger.error(
                "Error in sending command to client. Closing %s with error: %s",
                CHAT_CLIENT_IDENT_LIST.get(ident),
                err
            )
            close_socket(CHAT_CLIENT_IDENT_LIST.get(ident))

    else:
        logger.error("Unable to send to any clients.")
        send_to_masters("Unable to send to any clients.")


# broadcast chat messages to all connected clients
def broadcast(server_socket, sock, message):
    for sock_fd in connections:
        # send the message only to peer
        if sock_fd != server_socket and sock_fd != sock and sock_fd != sys.stdin:
            try:
                if connections[sock_fd]:
                    connections[sock_fd].send(message.encode())
                # sock_fd.send(message.encode())
            except:
                logger.error("Error in broadcast of messages. Closing %s", sock_fd)
                # broken socket connection
                close_socket(connections[sock_fd])


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        '-d',
        '--disconnect-unidentified',
        help="Disconnect clients that have not identified themselves in the first timeout period.",
        action="store_true",
        default=False,
    )

    parser.add_argument(
        '-l',
        '--line-numbers',
        help="Don't include line numbers in logging output",
        action="store_false",
        default=True,
    )
    parser.add_argument(
        '-p',
        '--port',
        help="The port for the webserver to listen on.",
        type=int,
        default=65533,
    )
    parser.add_argument(
        '-s',
        '--server',
        help="The django host to send the data to.",
        default=os.environ.get("GEO_API_HOST", "localhost:8000"),
    )
    parser.add_argument(
        '-v',
        dest='debug',
        help=("Increase the logging level. Can specify this option multiple "
              "times for more detail."),
        action="count",
        default=int(os.environ.get('DEBUG_LEVEL', 0))
    )
    parser.add_argument(
        '-w',
        '--wait',
        help="The timeout value for epoll. A float in seconds ",
        default=float(os.environ.get('EPOLL_TIMEOUT', 5.0))
    )
    args = parser.parse_args()

    log_level = 16 - args.debug

    logger = logging.getLogger('')
    logger.setLevel(logging.INFO)

    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(name)s - %(message)s'
    )
    if args.line_numbers:
        formatter = logging.Formatter(
            '%(asctime)s - %(process)d - %(levelname)s - %(name)s - %(lineno)d - %(message)s'
        )
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    # almost time to look into kombu
    logging.getLogger("pika").setLevel(logging.FATAL)

    if args.debug:
        logger.setLevel(log_level)
        ch.setLevel(log_level)

    set_api_host(args.server)

    main_report_task_queue, main_result_queue = start_consumers(bin_results=False)
    # report_task_queue, result_queue = start_consumers()

    logger.info("Task queue is %s", main_report_task_queue)
    logger.info("Result queue is %s", main_result_queue)
    sys.exit(chat_server(args.port, main_report_task_queue, main_result_queue, args.disconnect_unidentified, args.wait))
