#!/usr/bin/env python
# import json
#
# import pika
# import psycopg2
#
# connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
# channel = connection.channel()
# sql = """
#  UPDATE device_device
#   SET
#     manufacturer = %s,
#     model = %s
#   WHERE imei = %s"""
#
# try:
#     conn = psycopg2.connect("dbname='geotool' user='django' host='localhost' password='tiapw4gd2u'")
# except:
#     print("I am unable to connect to the database")
# cur = conn.cursor()
#
#
# def callback(ch, method, properties, body):
#     print(" [x] Received %r" % body)
#     data = json.loads(body.decode())
#     print("Imei is %s", data["imei"])
#     # keys = data.keys()
#     # values = [data[column] for column in data.remove("log_time")]
#     result = cur.execute(sql, (data["manufacturer"], data["model"], data["imei"]))
#     print(result)
#     updated_rows = cur.rowcount
#     print(updated_rows)
#     result = conn.commit()
#     print(result)
#
#
# channel.basic_consume(callback,
#                       queue='firmware_update',
#                       no_ack=True)
#
# channel.queue_declare(queue='firmware_update')
#
# print(' [*] Waiting for messages. To exit press CTRL+C')
# channel.start_consuming()


import asyncio
import aio_pika
import json
import os
from geotool_db_api.device_api import get_update_firmware_coroutine
from geotool_db_api.device_api import get_device_id

MQ_HOST = os.environ.get("MQ_HOST", "127.0.0.1")
MQ_USER = os.environ.get("MQ_USER", "guest")
MQ_PASS = os.environ.get("MQ_PASS", "guest")


async def main(loop):
    connection = await aio_pika.connect_robust("amqp://{}:{}@{}/".format(MQ_USER, MQ_PASS, MQ_HOST), loop=loop)

    queue_name = "firmware_update"

    # Creating channel
    channel = await connection.channel()    # type: aio_pika.Channel

    # Declaring queue
    queue = await channel.declare_queue(queue_name)   # type: aio_pika.Queue
    imei_map = {}

    async for message in queue:
        with message.process():
            print(message.body)
            data = json.loads(message.body)
            if data.get("imei", None):
                if imei_map.get(data["imei"]):
                    device_id = imei_map.get(data["imei"])
                else:
                    device_id = await get_device_id(data["imei"])
                    if device_id:
                        imei_map[data["imei"]] = device_id
            elif data.get("device", None):
                device_id = data["device"]
            # manufacturer: str, model: str, revision: str, serial: str, running_version: str, imei: str
            loop.create_task(get_update_firmware_coroutine(
                data["manufacturer"], data["model"], data["revision"], data["serial"], data["running_version"],
                device_id
            ))

            if queue.name in message.body.decode():
                break


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    print("Firmware update processsor has started.")
    loop.run_until_complete(main(loop))
    loop.close()