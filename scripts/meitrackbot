#!/usr/bin/env python
# chat_client.py
import os
import sys
import socket
import select
import argparse
import logging
import time

from meitrack import stub_processor
from meitrack.common import DIRECTION_CLIENT_TO_SERVER, DIRECTION_SERVER_TO_CLIENT
from meitrack.gprs_protocol import parse_data_payload
import random

devices = {
    "BOT1": {
        "imei": "77070407942500",
        #"start_lat": -33.815828,
        #"start_long": 151.200083,
        "start_lat": -33.805928,
        "start_long": 151.1899883,
        "up": 0.001,
        "down": 0.0,
        "left": 0.001,
        "right": 0.001,
    },
}


def set_initial_lat_long():
    for device in devices:
        devices[device]["lat"] = devices[device]["start_lat"]
        devices[device]["long"] = devices[device]["start_long"]


def change_direction():
    for device in devices:
        logger.info(
            "Device %s, lat difference is %s", device, (devices[device]["lat"] - devices[device]["start_lat"])
        )
        if devices[device]["lat"] - devices[device]["start_lat"] > 0.03:
            logger.info("Device %s moving down", device)
            devices[device]["up"] = 0.0
            devices[device]["down"] = 0.001
        if devices[device]["lat"] - devices[device]["start_lat"] < -0.03:
            logger.info("Device %s moving up", device,)
            devices[device]["up"] = 0.001
            devices[device]["down"] = 0.00
        logger.info(
            "Device %s, long difference is %s", device, (devices[device]["long"] - devices[device]["start_long"])
        )
        if devices[device]["long"] - devices[device]["start_long"] < -0.03:
            logger.info("Device %s moving right", device,)
            devices[device]["left"] = 0.0
            devices[device]["right"] = 0.001
        if devices[device]["long"] - devices[device]["start_long"] > 0.03:
            logger.info("Device %s moving left", device,)
            devices[device]["left"] = 0.001
            devices[device]["right"] = 0.0


def move_devices():
    for device in devices:
        devices[device]["lat"] = round(
            devices[device]["lat"] + random.uniform(
                devices[device]["up"],
                devices[device]["down"] * -1.0
            ),
            6
        )
        devices[device]["long"] = round(
            devices[device]["long"] + random.uniform(
                devices[device]["left"] * -1.0,
                devices[device]["right"]
            ),
            6
        )


START_LAT = -33.815828
START_LONG = 151.200083
MOVE_LAT = -0.0004
MOVE_LONG = 0.0004
current_move_lat = MOVE_LAT
current_move_long = MOVE_LONG


def move(latitude, longitude):
    global START_LONG, START_LAT, MOVE_LONG, MOVE_LAT, current_move_long, current_move_lat

    if abs(latitude - START_LAT) > 0.002:
        if latitude > START_LAT:
            current_move_lat = MOVE_LAT * -1
    if abs(longitude - START_LONG) > 0.002:
        if longitude < START_LONG:
            current_move_long = MOVE_LONG * -1

    latitude = latitude + current_move_lat
    longitude = longitude + current_move_long

    return round(latitude, 6), round(longitude, 6)


def send_gprs_message(imei, sock, gprs_message):
    gprs_message.imei = imei
    sock.send(gprs_message.as_bytes())
    print(gprs_message.as_bytes())


send_data = [
    # RFID
    b"""AAA,37,%b,%b,180701053440,A,4,10,0,208,19.1,68,29899,421883,505|3|00FA|04E381F5,0500,0000|0000|0000|018A|0576,%%  ^FRANKLING MICHAEL MR.^^?;6006644100700761257=999919770704=?+  3100            1            58007167  00102?,,108,0000,,3,0,,0|0000|0000|0000|0000|0000""",

    # Engine on
    b'AAA,3,%b,%b,181202051813,A,6,5,0,292,1.1,58,877611,5865393,505|2|7D07|041C15F3,0400,0000|0000|0000|018B|0658,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',

    # Track by time interval
    b'AAA,35,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Track by time interval
    b'AAA,35,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Track by time interval
    b'AAA,35,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Track by time interval
    b'AAA,35,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',

    # Start moving
    b'AAA,42,%b,%b,181202052813,A,5,6,0,318,1.3,65,877698,5866002,505|2|7D07|041C15F0,0500,0000|0000|0000|018E|0650,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Track by distance interval
    b'AAA,33,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Track by distance interval
    b'AAA,33,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Cornering
    b'AAA,32,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Track by distance interval
    b'AAA,33,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Stop moving
    b'AAA,41,%b,%b,181216051556,A,9,13,0,0,0.9,17,3413775,11108423,520|0|0011|0070EB69,0000,0000|0000|0000|0188|04CC,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Start moving
    b'AAA,42,%b,%b,181202052813,A,5,6,0,318,1.3,65,877698,5866002,505|2|7D07|041C15F0,0500,0000|0000|0000|018E|0650,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Cornering
    b'AAA,32,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Track by distance interval
    b'AAA,33,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # SOS Button Pressed
    b'AAA,1,%b,%b,181202052813,A,5,6,0,318,1.3,65,877698,5866002,505|2|7D07|041C15F0,0500,0000|0000|0000|018B|064A,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # SOS Button Released
    b'AAA,9,%b,%b,181202053813,A,5,5,0,319,1.3,66,877765,5866593,505|2|7D07|041C15F0,0400,0000|0000|0000|018D|063B,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',

    # Engine Off
    b'AAA,11,%b,%b,181202050813,A,3,5,0,321,3.8,53,877516,5864793,505|2|7D07|041C15F3,0000,0000|0000|0000|018D|0678,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',

    # External Battery on
    b'AAA,22,%b,%b,181202025914,V,0,0,0,0,0.0,0,877180,5857061,0|0|0000|00000000,0400,0000|0000|0000|018C|065F,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # GPS Antenna Cut
    b'AAA,28,%b,%b,181202023758,V,0,0,0,0,0.0,0,877048,5855965,0|0|0000|00000000,0000,0000|0000|0000|018C|063A,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # device Reboot
    b'AAA,29,%b,%b,181202025936,A,7,0,0,0,1.4,58,877180,5857083,0|0|0000|00000000,0400,0000|0000|0000|018D|066B,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Track by time interval
    b'AAA,35,%b,%b,181216051601,A,9,13,0,0,0.9,17,3413775,11108428,520|0|0011|0070EB69,0000,0000|0000|0000|0185|04C8,00000001,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Photo
    b'AAA,39,%b,%b,181216080645,A,9,13,0,0,0.9,17,3413775,11118688,520|0|0011|0070A33F,0000,0000|0000|0000|0189|04CC,181216080645_C1E35_N1U1D1.jpg,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Stop moving
    b'AAA,41,%b,%b,181216051556,A,9,13,0,0,0.9,17,3413775,11108423,520|0|0011|0070EB69,0000,0000|0000|0000|0188|04CC,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Fatigue Driving
    b'AAA,135,%b,%b,181202140407,A,10,6,0,85,0.9,69,878810,5896856,505|2|7D07|041C15F0,0400,0000|0000|0000|018D|0659,,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
    # Enough rest after fatigue
    b'AAA,136,%b,%b,180602070902,A,10,10,0,31,1.0,61,8924,682111,505|3|00FA|04E381F2,0003,0000|0000|0000|0198|0003,182713,,108,0000,,3,0,,0|0000|0000|0000|0000|0000',
]


def next_message(lat, long):
    for item in send_data:
        yield (item % (str(lat, long)))


def chat_client(
        host, port, imei, send_data_interval
):
    imei = imei.encode()

    gprs_list, before, after = parse_data_payload(
        b'$$N196,864507032323403,AAA,136,-33.815828,151.200083,180602070902,A,10,10,0,31,1.0,61,8924,682111,505|3|00FA|04E381F2,0003,0000|0000|0000|0198|0003,182713,,108,0000,,3,0,,0|0000|0000|0000|0000|0000*07\r\n',
        DIRECTION_CLIENT_TO_SERVER
    )
    if len(gprs_list) != 1:
        sys.exit(1)

    set_initial_lat_long()
    start_lat = START_LAT
    start_long = START_LONG
    login_gprs = gprs_list[0]
    login_gprs.imei = imei
    enclosed_data = b"AAA,136,%b,%b,180602070902,A,10,10,0,31,1.0,61,8924,682111,505|3|00FA|04E381F2,0003,0000|0000|0000|0198|0003,182713,,108,0000,,3,0,,0|0000|0000|0000|0000|0000" % (
        str(devices["BOT1"]["lat"]).encode(),
        str(devices["BOT1"]["long"]).encode()
    )
    login_gprs.enclosed_data.parse_payload(enclosed_data)
    login_gprs.recalc_leftover()

    message = login_gprs.as_bytes()

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(100)
    s.setblocking(1)

    # connect to remote host
    try:
        s.connect((host, port))
        s.send(message)
    except Exception as err:
        print('Unable to connect: %s' % (err,))
        sys.exit()

    print('Connected to remote host. You can start sending messages')
    sys.stdout.write('[Me] ')
    sys.stdout.flush()

    data_counter = 0

    while 1:
        socket_list = [s]
        timeout = 1000
        timeout = send_data_interval

        # Get the list sockets which are readable
        ready_to_read, ready_to_write, in_error = select.select(socket_list, [], [], timeout)

        if not ready_to_read:
            move_devices()
            change_direction()
            start_lat, start_long = move(start_lat, start_long)
            enclosed_data = send_data[data_counter] % (
                str(devices["BOT1"]["lat"]).encode(),
                str(devices["BOT1"]["long"]).encode()
            )
            # next_command = next_message(devices["BOT1"]["lat"], devices["BOT1"]["long"])

            login_gprs.enclosed_data.parse_payload(enclosed_data)
            login_gprs.recalc_leftover()

            s.send(login_gprs.as_bytes())
            print(login_gprs.as_bytes())
            data_counter = (data_counter + 1) % len(send_data)

        for sock in ready_to_read:
            if sock == s:
                # incoming message from remote server, s
                data = sock.recv(4096)

                if not data:
                    print('\nDisconnected from chat server')
                    sys.exit()
                else:
                    sys.stdout.write("\n")
                    print(data)
                    # sys.stdout.write("%s".format(data))
                    if b'D01,0' in data:
                        print("We are ignoring the file listing command")
                    else:
                        gprs_list, before, after = parse_data_payload(data, DIRECTION_SERVER_TO_CLIENT)
                        for gprs in gprs_list:
                            command = gprs.enclosed_data.as_bytes()
                            # We don't want to respond to the file transfer test running from "file_test()"
                            if b"180525064204_C1E1_N1U1D1.jpg" not in command:
                                response_list = stub_processor.request_to_response(command, imei)
                                if response_list:
                                    for response in response_list:
                                        print("Data identifier in request is: %s" % (gprs.data_identifier,))
                                        response.data_identifier = gprs.data_identifier
                                        print("Sending response %s" % (response.as_bytes(),))
                                        s.send(response.as_bytes())
                            else:
                                print("No response to send for incoming command {}".format(command))
                    sys.stdout.write('[Me] ')
                    sys.stdout.flush()
            else:
                # user entered a message
                msg = sys.stdin.readline().rstrip()
                sys.stdout.write('[Me] ')
                sys.stdout.flush()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    # "start_lat": -33.805928,
    # "start_long": 151.1899883,
    parser.add_argument(
        '-a',
        '--latitude',
        help="Start lat",
        default=float(os.environ.get("START_LAT", "-33.805928")),
        type=float,
    )
    parser.add_argument(
        '-b',
        '--longitude',
        help="Start long",
        default=float(os.environ.get("START_LONG", "151.1899883")),
        type=float,
    )
    parser.add_argument(
        '-f',
        '--file-test',
        help="Issue a file test on connect.",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        '-i',
        '--imei',
        help="The imei to use in the connect string.",
        default=os.environ.get("IMEI", "0407"),
    )
    parser.add_argument(
        '-o',
        '--host',
        help="The host to connect to.",
        default="localhost",
    )

    parser.add_argument(
        '-p',
        '--port',
        help="The port for the webserver to listen on.",
        type=int,
        default=65533
    )
    parser.add_argument(
        '-r',
        '--version',
        help="The protocol version to use.",
        type=int,
        default=1
    )
    parser.add_argument(
        '-s',
        '--send-data',
        help="Send data on intervals defined by -w.",
        action="store_true",
        default=True
    )
    parser.add_argument(
        '-w',
        '--wait-time',
        help="Interval at which to send data if enabled by -s option.",
        type=int,
        default=30
    )
    parser.add_argument(
        '-v',
        dest='debug',
        help=("Increase the logging level. Can specify this option multiple "
              "times for more detail."),
        action="count",
        default=0
    )
    parser.add_argument(
        '--ignore-file-listing',
        help="Ignore the file listing command",
        default=True,
        action="store_true",
    )
    args = parser.parse_args()

    log_level = 11 - args.debug

    logger = logging.getLogger('')
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    if args.debug:
        logger.setLevel(log_level)
        ch.setLevel(log_level)

    devices["BOT1"]["start_lat"] = args.latitude
    devices["BOT1"]["start_long"] = args.longitude
    sys.exit(
        chat_client(
            args.host, args.port, args.imei, args.wait_time
        )
    )
