#!/usr/bin/env python
import json

import pika
import psycopg2

connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
channel = connection.channel()
sql = """ 
 INSERT INTO event_eventlog (device_id, timestamp, event_description, event_type, log_time, acknowledged_flag)
  VALUES (%s, %s, %s, %s, %s, %s)
"""

try:
    conn = psycopg2.connect("dbname='geotool' user='django' host='localhost' password='tiapw4gd2u'")
except:
    print("I am unable to connect to the database")
cur = conn.cursor()

imei_map = {}

def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)
    data = json.loads(body.decode())
    print("Imei is %s" % data["imei"])
    if imei_map.get(data["imei"]):
        device_id = imei_map.get(data["imei"])
    else:
        cur.execute("""select id from device_device where imei=%s""", (data["imei"],))
        rows = cur.fetchall()
        device_id = rows[0][0]
        imei_map[data["imei"]] = device_id
    # keys = data.keys()
    # values = [data[column] for column in data.remove("log_time")]
    result = cur.execute(
        sql, (
            device_id, data["timestamp"], data["event_description"], data["event_type"], data["log_time"],
            False
        )
    )
    print(result)
    updated_rows = cur.rowcount
    print(updated_rows)
    result = conn.commit()
    print(result)


channel.basic_consume(callback,
                      queue='event_log',
                      no_ack=True)

channel.queue_declare(queue='event_log')

print(' [*] Waiting for messages. To exit press CTRL+C')
channel.start_consuming()
