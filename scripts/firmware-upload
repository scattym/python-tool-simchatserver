import os
import argparse
import logging
import base64
from geotool_api.firmware_api import upload_firmware
from geotool_api.common import set_api_host


def get_bytes_from_file(filename):
    return open(filename, "rb").read()


def file_name_to_version(file_name):
    version_from_file = file_name.split('/')[-1]
    version_from_file = version_from_file.replace(".OTA", "")
    version_from_file = version_from_file.replace(".ota", "")
    return version_from_file


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        '-d',
        '--device-type',
        help="The device type in hex",
        default='0027',
    )
    parser.add_argument(
        '-f',
        '--file-name',
        help="The firmware file to upload.",
        required=True,
    )
    parser.add_argument(
        '-s',
        '--server',
        help="The django host to send the data to.",
        default=os.environ.get("GEO_API_HOST", "localhost:8000"),
    )
    parser.add_argument(
        '-t',
        '--firmware-type',
        help="The type of firmware.",
        default="meitrack",
    )
    parser.add_argument(
        '-v',
        dest='debug',
        help=("Increase the logging level. Can specify this option multiple "
              "times for more detail."),
        action="count",
        default=int(os.environ.get('DEBUG_LEVEL', 0))
    )

    args = parser.parse_args()

    log_level = 16 - args.debug

    logger = logging.getLogger('')
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s - %(process)d - %(levelname)s - %(name)s - %(lineno)d - %(message)s'
    )
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    if args.debug:
        logger.setLevel(log_level)
        ch.setLevel(log_level)

    set_api_host(args.server)

    version = file_name_to_version(args.file_name)
    file = "{}{}".format(version, ".OTA")

    file_bytes = get_bytes_from_file(args.file_name)
    file_bytes_b64 = base64.b64encode(file_bytes)

    print(
        upload_firmware(
            version,
            file,
            file_bytes_b64.decode(),
            "nochecksum",
            args.firmware_type,
            args.device_type,
        )
    )
    print(version)
    print(file)
