import json

import paho.mqtt.client as mqtt
import datetime
import time
import binascii
import logging
import argparse
from sim_chat_lib.geotool_api import camera_api, device_api, common


# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
#    client.subscribe("$SYS/#")
    client.subscribe("v1/devices/+/new_image/#")
    client.subscribe("v1/devices/+/new_location")


# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+" "+binascii.hexlify(msg.payload))
    fields = msg.topic.split('/')
    if "new_image" in msg.topic:
        imei = fields[2].rstrip().lstrip()
        camera_number = fields[4]
        filename = fields[5]
        device = device_api.get_device_pk(imei)
        camera_api.add_camera_image(device, camera_number, datetime.datetime.now(), msg.payload)
    if "new_location" in msg.topic:
        imei = fields[2].rstrip().lstrip()
        data_record = json.loads(msg.payload)
        # imei, longitude, latitude, true_track, ground_speed, altitude, dilution, age_gps_data, num_sats, timestamp, log_time
        logger.debug(data_record['longitude'])
        logger.debug(data_record['latitude'])
        logger.debug(data_record['num_sats'])
        device_api.device_update_by_long_lat(
            imei,
            data_record['longitude'],
            data_record['latitude'],
            data_record['true_track'],
            data_record['speed'],
            data_record['altitude'],
            data_record["accuracy"],
            data_record['age_gps_data'],
            data_record.get("num_sats"),
            datetime.datetime.now(),
            datetime.datetime.now(),
        )






if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        '-i',
        '--imei',
        help="The imei to use in the connect string.",
        default="0407",
    )
    parser.add_argument(
        '-o',
        '--host',
        help="The host to connect to.",
        default="localhost",
    )

    parser.add_argument(
        '-p',
        '--port',
        help="The port for the webserver to listen on.",
        type=int,
        default=65533
    )
    parser.add_argument(
        '-r',
        '--version',
        help="The protocol version to use.",
        type=int,
        default=1
    )
    parser.add_argument(
        '-v',
        dest='debug',
        help=("Increase the logging level. Can specify this option multiple "
              "times for more detail."),
        action="count",
        default=0
    )

    args = parser.parse_args()

    log_level = 11 - args.debug

    logger = logging.getLogger('')
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    ch.setFormatter(formatter)
    logger.addHandler(ch)

    if args.debug:
        logger.setLevel(log_level)
        ch.setLevel(log_level)

    username = "sysadmin"
    password = "apw4sysadmin2u"
    common.set_api_host("10.1.1.4:8000")

    client = mqtt.Client()
    client.username_pw_set(username, password=password)
    client.on_connect = on_connect
    client.on_message = on_message

    client.connect("localhost", 65532, 60)

    # Blocking call that processes network traffic, dispatches callbacks and
    # handles reconnecting.
    # Other loop*() functions are available that give a threaded interface and a
    # manual interface.
    client.loop_forever()
